webpackJsonp([0xccc7515567d0],{324:function(n,l){n.exports={data:{markdownRemark:{html:"<h3>code review 的要求</h3>\n<p>Lv1. 验证代码是否符合当前需求的正确和有效的解决方案</p>\n<p>Lv2 确保你的代码是可维护的</p>\n<p>Lv3 增加对代码库的共享知识</p>\n<p>Lv4 通过定期反馈提高团队的技能</p>\n<p>Lv5 不应该成为开发的一个沉重开销</p>\n<h3>code review 原则</h3>\n<h5>发布pr之前应该明确</h5>\n<ol>\n<li>邀请合适Reviewers</li>\n<li>有一个主要审核人，做出决定</li>\n<li>明确每个Reviewer的审核范围，和主要职责</li>\n</ol>\n<h5>提出pr需要注意的</h5>\n<ol>\n<li>这个pr解决了什么问题，用什么解决，为什么用。尽可能丰富的上下文关系，能够帮助别人更快的审核你的代码</li>\n<li>pr越小越好，小的好处是更准确的描述，更少的不必要沟通，以及更快的通过审核，迭代。注意区分代码逻辑和代码风格的修改最好分2个分支提</li>\n<li>提高代码的可读性</li>\n<li>点击确认发布按钮前，认真阅读diff，确认这次pr修改了哪些内容。尝试用第三人来目光来审视自己的diff。如果太混乱难以阅读，首先应该修改代码风格以及抽象和重构。然后再是考虑加上部分注释和上下文</li>\n</ol>\n<h5>审核过程中</h5>\n<ol>\n<li>避免重大更改。如果需要重大更改尽早的提醒正在审核的同事。</li>\n<li>回应每一条评论。明确反馈，以及是否做出修正，及时沟通</li>\n<li>每次cr是一次讨论，不是一个要求。面对cr评论，欢迎提出不同意见，但要解释清楚为什么</li>\n</ol>",frontmatter:{date:"2018-05-01 11:20",path:"/blog/2",title:"2222"}}},pathContext:{}}}});
//# sourceMappingURL=path---blog-2-ab4901a302884e6f62d9.js.map